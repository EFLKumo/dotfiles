global {
    tproxy_port: 12345
    tproxy_port_protect: true
    so_mark_from_dae: 0

    log_level: debug

    disable_waiting_network: false

    wan_interface: auto

    auto_config_kernel_parameter: true

    #tcp_check_url: 'http://cp.cloudflare.com'
    tcp_check_url: 'http://cp.cloudflare.com,1.1.1.1,2606:4700:4700::1111'
    tcp_check_http_method: HEAD
    udp_check_dns: 'dns.google.com:53,8.8.8.8,2001:4860:4860::8888'
    check_interval: 30s
    check_tolerance: 50ms
    
    dial_mode: domain
    
    allow_insecure: false
    sniffing_timeout: 100ms
    tls_implementation: tls
    utls_imitate: chrome_auto
}

dns {
    ipversion_prefer: 4

    upstream {
        dohpub: 'https://doh.pub/dns-query'
        eflxdns: 'https://dns.eflx.top/dns-query'
        cloudflare: 'https://1.1.1.1/dns-query'
        google_tls: 'tls://8.8.8.8'
        cloudflare_tls: 'tls://1.1.1.1'
        ali: 'udp://223.5.5.5:53'
    }

    routing {
        request {
            qname(geosite:category-ads-all) -> reject
            
            # disable ECH to avoid affecting traffic split
            qtype(https) -> reject

            # ensure no lookup loop
            qname(full: dns.eflx.top) -> dohpub

            # employ dohpub on China domains and my own DoH on others
            qname(geosite:cn) -> dohpub
            fallback: eflxdns
        }

        response {
            # probably blocked by GFW
            ip(geoip:private) && !qname(geosite:cn) -> eflxdns
            qtype(aaaa) && !qname(geosite:cn) -> reject

            qname(geosite:cn) && upstream(dohpub) -> accept
            upstream(eflxdns) -> accept

            fallback: accept
        }
    }
}

node {
    mihomo: 'socks5://127.0.0.1:7890'
}

group {
    proxy {
        policy: fixed(0)
    }
}

routing {
    # disable h3
    l4proto(udp) && dport(443) -> block

    ipversion(6) -> must_direct
    pname(dae) -> must_direct
    pname(mihomo) -> must_direct
    pname(easytier-core) -> must_direct
    pname(systemd-resolved) -> must_direct
    pname(NetworkManager) -> must_direct # needed for WLAN

    dip(224.0.0.0/3, 'ff00::/8') -> direct
    ip(geoip: private) -> direct
    domain(geosite:private) -> direct

    # custom rules
    domain(suffix: deeplx.org) -> direct
    domain(geosite:cn) -> direct
    ip(geoip:cn) -> direct

    fallback: proxy
}
